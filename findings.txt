# Findings

## Basic Web Components

* Components work declaratively and imperatively
* Components lifecycle events: readyCallback, insertedCallback, removedCallback, attributeChangedCallback
* Component shadow dom *not* working as advertised, nor is it working with <template>, at least I haven't figured out how to get it to work.
* No way to detect insertion/deletion of child elements (aside from normal DOM events), or to limit which child elements are legal.
* No way to register specific attributes or events supported

## Polymer Components

* Have a slightly different mechanism for declaring
* Haven't figured out how to define the constructor yet (same as for Basic Components)
* Can have data-binding internally
* Attributes auto-update their internal data bindings, but to data-bind the attributes themselves, expose them by publishing them
* Internal IDs are not exposed outside of the Shadow DOM, are gathered into an internal map named $ for internal access (this would be *very* handy for Waterbear).
* Poly components have shorter names for lifecycle events (ready, inserted, removed, attributeChanged)
* Properties can have default values set in either the prototype or in the ready event. Default properties also tell the Prototype system what type to expect for the property.
* Properties can be bound to objects, but it is not clear how to use that from outside the Polymer declaration (i.e, from HTML).
* Polymer elements can declaratively bind to event handlers, which are passed the event, the detail, and the original element which registered for the event.
* Property change watchers: polymer elements can register for change events on properties with the syntax: [propertyNameChanged]
* Polymer elements can extend other polymer elements. It is not clear from the docs if they can extend HTML elements or basic webcomponents. If you extend a polymer element you can over-ride its methods, in which case this.super() will call the original method.
* Polymer elements have .asyncMethod, .fire(), and .asyncFire() methods

## Other Goodies Included

* Pointer Events
* Web Animations
* Model-driven views, which may allow re-binding (so bound elements could be bound to data loaded via Ajax, for example)

## Further research needed

* style hooks
* how do the mechanics of this work on mobile?
* how do the polymer elements look and work on mobile?

## Wishlist

* style encapsulation
* DOM4 methods: .remove(), .append(), .prepend(), .before(), .after(), .replace(). Note: these take either a node or a DOMString as an argument. Handy.
* data channels for pub-sub between elements

### Wishlist elements

* Icon button
* Halo
* Card (with flip animation)
* Form (attached to card)
* Card Stack Layout
* Card Fan Layout
* Card Spread Layout
* Drawing Canvas
* Onionskin
* Movie (generatable from images)
* Block, Expression, Context, Asset, EventHandler
* InputConnection, OutputConnection, Wire
* Microformat Components: hcard, XFN, hCalendar, VoteLinks, hReview, rel-license, rel-tag, XOXO, adr, geo, hAtom, hListing, hMedia, hNews, hProduct, hRecipe, hReview, rel-author, rel-home, rel-payment. Actually, does this make any sense at all. Wouldn't web components defeat the purpose of Microformats?

## Polymer Elements

Includes elements for not directly ui-widgets:

* ajax
* animation
* collapse
* file
* flex-layout
* google-jsapi
* grid-layout
* jsonp
* key-helper
* layout
* list
* localstorage
* media-query
* meta
* overlay
* page
* selector
* shared-lib
* signals
* view-source-link

And for some straightforward UI:

* accordion
* collapsible
* field
* icon
* icon-button
* menu
* menu-button
* menu-item
* nav-arrow
* overlay
* ratings
* sidebar
* sidebar-menu
* splitter
* submenu-item
* tabs
* theme-aware
* toggle-button
* toolbar
